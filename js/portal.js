// Generated by CoffeeScript 1.10.0
(function() {
  var connectWebSocket, connected, drawItem, draw_drop_page, draw_index_page, get, green, onDrop, portal, randId, receivedClosed, receivedSpec, setUpDropZone, websocketOpened;

  eval(onecup["import"]());

  randId = function() {
    return Math.random().toString(32).slice(2) + Math.random().toString(32).slice(2);
  };

  window.track = function(name, kargs) {
    var xhr;
    if (!kargs) {
      kargs = {};
    }
    if (window.location.href.indexOf("dev.istrolid.com") !== -1) {
      return;
    }
    
    xhr = new XMLHttpRequest();
    xhr.open("POST", "https://zebra.pushbullet.com");
    kargs.name = "portal_web_" + name;
    kargs.user_iden = localStorage.userIden;
    kargs.client_version = portal.VERSION;
    return xhr.send(JSON.stringify(kargs));
  };

  portal = {};

  portal.VERSION = 8;

  window.portal = portal;

  portal.fileQ = [];

  portal.state = "default";

  portal.websocket_connected = false;

  portal.guid = randId();

  if (!localStorage.userIden) {
    localStorage.userIden = randId();
  }

  portal.QRCodeImage = makeQRCode({
    url: portal.guid,
    colorLight: "rgba(0,0,0,0)",
    colorDark: "rgba(0,0,0,1)"
  });

  console.log(portal.QRCodeImage);


  /*
  portal.QRCodeImage = qr.toDataURL
      background: "rgba(0,0,0,0)"
      value:portal.guid
      size:9
   */

  get = function(url, done) {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open('POST', url, true);
    xhr.setRequestHeader('Accept', 'application/json');
    xhr.timeout = 5000;
    xhr.onreadystatechange = function() {
      var response;
      console.log("onreadystatechange", xhr.readyState, url);
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          response = JSON.parse(xhr.responseText);
          done(response);
        } else {
          done(null);
        }
      }
      return onecup.refresh();
    };
    return xhr.send();
  };

  websocketOpened = function() {
    return track("websocket_opened");
  };

  receivedSpec = function(spec) {
    portal.state = "connecting";
    portal.spec = spec;
    return get('http://' + spec.host + '/check', function(response) {
      if (response) {
        connected(spec, response);
        return portal.state = "connected";
      } else {
        return portal.state = "error";
      }
    });
  };

  connected = function(spec, client) {
    portal.client = client;
    portal.spec = spec;
    return track("connected");
  };

  onDrop = function(file) {
    var d, fileType, fullPath, lastUpdate, loadedBefore, qItem, ticks, xhr;
    if (!portal.spec) {
      return;
    }
    onecup.refresh();
    fullPath = file.fullPath || file.name;
    fileType = file.type;
    if (!fileType) {
      fileType = window.mimeType[fullPath.split(".").pop()] || "";
    }
    xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://' + portal.spec.host + '/files', true);
    xhr.setRequestHeader('Accept', 'application/json');
    xhr.setRequestHeader('X-File-Path', encodeURI(fullPath).split("%20").join(" "));
    xhr.setRequestHeader('X-File-Type', fileType);
    qItem = {
      xhr: xhr,
      fullPath: fullPath,
      type: fileType,
      total: file.size
    };
    portal.fileQ.push(qItem);
    if (!fileType && fullPath.indexOf(".") === -1) {
      qItem.error = true;
      qItem.start = null;
      qItem.errorMessage = "Dropping folders is not supported by your browser (try Chrome).";
      return;
    }
    ticks = 0;
    d = 0;
    loadedBefore = 0;
    lastUpdate = Date.now();
    xhr.upload.onprogress = function(e) {
      if (Date.now() - lastUpdate >= 100) {
        ++ticks;
        d += Math.abs(loadedBefore - e.loaded) / 1024;
        loadedBefore = e.loaded;
        lastUpdate = Date.now();
        qItem.loaded = e.loaded;
        qItem.total = e.total;
        qItem.speed = (d / ticks) / 10;
        return onecup.refresh();
      }
    };
    xhr.onreadystatechange = function(e) {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          qItem.done = true;
          track("file_uploaded", {
            size: qItem.size,
            type: qItem.type
          });
          portal.pumpFiles();
        }
      }
      return onecup.refresh();
    };
    xhr.onerror = function(e) {
      qItem.error = e;
      qItem.done = true;
      track("file_error", {
        size: qItem.size,
        type: qItem.type
      });
      portal.pumpFiles();
      return onecup.refresh();
    };
    xhr.onabort = function(e) {
      qItem.error = e;
      qItem.done = true;
      track("file_abort", {
        size: qItem.size,
        type: qItem.type
      });
      portal.pumpFiles();
      return onecup.refresh();
    };
    qItem.start = function() {
      qItem.started = true;
      return xhr.send(file);
    };
    return portal.pumpFiles();
  };

  portal.pumpFiles = function() {
    var j, len, progress, qItem, ref, results;
    progress = 0;
    ref = portal.fileQ;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      qItem = ref[j];
      if (!qItem.error && qItem.started && !qItem.done) {
        progress += 1;
      }
      if (progress < 3 && !qItem.started && !qItem.error) {
        if (typeof qItem.start === "function") {
          qItem.start();
        }
        results.push(progress += 1);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  receivedClosed = function() {
    location.reload();
  };

  setUpDropZone = function() {
    var dropZone, read;
    dropZone = document.body;
    console.log("dropZone", dropZone);
    dropZone.addEventListener('dragenter', function(e) {
      e.stopPropagation();
      e.preventDefault();
      e.dataTransfer.dropEffect = 'copy';
    });
    dropZone.addEventListener('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
    });
    dropZone.addEventListener('dragleave', function(e) {
      e.stopPropagation();
      e.preventDefault();
    });
    dropZone.addEventListener('drop', function(e) {
      var file, files, i, item, items, j, len;
      e.stopPropagation();
      e.preventDefault();
      items = e.dataTransfer.items;
      if (items != null) {
        console.log("using items....");
        i = 0;
        while (i < items.length) {
          item = items[i].webkitGetAsEntry();
          read(item);
          i++;
        }
        return;
      }
      files = e.dataTransfer.files;
      if (files != null) {
        console.log("using files....");
        for (j = 0, len = files.length; j < len; j++) {
          file = files[j];
          onDrop(file);
        }
      }
    });
    return read = function(item) {
      var reader;
      if (item === null) {
        return;
      }
      if (item.isDirectory) {
        reader = item.createReader();
        return reader.readEntries(function(entries) {
          return entries.forEach(function(entry) {
            return read(entry);
          });
        });
      } else if (item.isFile) {
        return item.file(function(file) {
          file.fullPath = item.fullPath;
          return onDrop(file);
        });
      }
    };
  };

  window.onload = function() {
    track("visit");
    connectWebSocket();
    return setUpDropZone();
  };

  connectWebSocket = function() {
    var timeoutMs;
    timeoutMs = 45000;
    console.log("connecting websocket");
    if (portal.ws != null) {
      portal.ws.close();
    }
    portal.ws = new WebSocket('wss://portal-api.pushbullet.com/' + portal.guid);
    portal.wsTimeout = setTimeout(connectWebSocket, timeoutMs);
    portal.ws.onopen = function(event) {
      websocketOpened();
    };
    return portal.ws.onmessage = function(e) {
      var message;
      message = JSON.parse(e.data);
      console.log('Received message', message);
      if (message.type === 'nop') {
        portal.websocket_connected = true;
        clearTimeout(portal.wsTimeout);
        portal.wsTimeout = setTimeout(connectWebSocket, timeoutMs);
      }
      if (message.type === 'spec') {
        receivedSpec(message);
      } else if (message.type === 'closed') {
        receivedClosed();
      }
      return onecup.refresh();
    };
  };

  green = "43AA61";

  window.body = function() {
    css("body", function() {
      position("absolute");
      top(0);
      bottom(0);
      left(0);
      right(0);
      padding(0);
      margin(0);
      font_family("'Helvetica Neue', Helvetica, Arial, sans-serif");
      return background_color("white");
    });
    return div("#page", function() {
      div("#header", function() {
        position("absolute");
        background_color(green);
        if (portal.state !== "connected") {
          height("100%");
        } else {
          height(188);
        }
        return width("100%");
      });
      return div(function() {
        position("relative");
        width("100%");
        height("100%");
        if (portal.state === "connected") {
          draw_drop_page();
        } else {
          draw_index_page();
        }
      });
    });
  };

  draw_index_page = function() {
    var url;
    if (portal.state === "error") {
      div(function() {
        position("absolute");
        top(136);
        left(0);
        right(0);
        font_size(28);
        font_weight("normal");
        color("white");
        return text("We couldn't connect to your device.");
      });
      div(function() {
        position("absolute");
        top(230);
        left(0);
        right(0);
        font_size(18);
        line_height(30);
        font_weight("normal");
        color("white");
        return ul(function() {
          li(function() {
            return text("Is your computer and phone on the same WiFi network?");
          });
          li(function() {
            return text("Is the Portal app still open?");
          });
          return li(function() {
            return text("Does your WiFi prevent devices from connecting to each other? (AP isolation)");
          });
        });
      });
      div(".button", function() {
        color("black");
        position("absolute");
        top(140);
        right(0);
        font_size(14);
        padding("10px 14px");
        border_radius(3);
        box_shadow("0px 1px 3px rgba(0,0,0,.5)");
        cursor("pointer");
        text("RETRY");
        css(function() {
          return background_color("white");
        });
        css(":hover", function() {
          return background_color("#EEE");
        });
        return onclick(function() {
          track("retry");
          portal.spec = null;
          return portal.state = "default";
        });
      });
    } else {
      div(function() {
        position("absolute");
        top("50%");
        left("50%");
        width(340);
        height(340);
        transform("translate(-50% , -50% )");
        border_radius(280);
        return background_color("white");
      });
      if (portal.websocket_connected) {
        img({
          src: portal.QRCodeImage
        }, function() {
          position("absolute");
          transform("translate(-50% , -50%)");
          top("51.2%");
          return left("51.2%");
        });
      } else {
        div(function() {
          position("absolute");
          top("50%");
          left("51%");
          transform("translate(-50% , -50%)");
          color("#888");
          return text("Loading...");
        });
      }
    }
    return;
  };

  draw_drop_page = function() {
    div(function() {
      position("absolute");
      top(75);
      left(70);
      font_size(34);
      color("white");
      return text("Drag and drop files");
    });
    div(".button", function() {
      color("black");
      position("absolute");
      top(77);
      left(420);
      font_size(14);
      padding("10px 14px");
      border_radius(3);
      box_shadow("0px 1px 3px rgba(0,0,0,.5)");
      cursor("pointer");
      text("DISCONNECT");
      css(function() {
        return background_color("white");
      });
      css(":hover", function() {
        return background_color("#EEE");
      });
      return onclick(function() {
        track("disconnect");
        get('http://' + portal.spec.host + '/done', function() {});
        portal.spec = null;
        return portal.state = "default";
      });
    });
    if (portal.fileQ.length === 0) {
      div(function() {
        position("absolute");
        top(344);
        left("51%");
        transform("translate(-50% , -50%)");
        return img({
          src: "img/DragAndDrop.png",
          width: 86,
          height: 123
        });
      });
      div(function() {
        position("absolute");
        top(448);
        left("50%");
        transform("translate(-50% , -50%)");
        text_align("center");
        width(200);
        color("#A6A6A6");
        font_size(18);
        text("Drop files or");
        return div(function() {
          text_decoration("underline");
          return text("click here to upload");
        });
      });
      return input({
        type: "file",
        multiple: true
      }, function() {
        cursor("pointer");
        position("absolute");
        top(328);
        left("50%");
        transform("translate(-50% , -50%)");
        text_align("center");
        width(200);
        height(200);
        background_color("red");
        opacity(".0001");
        return onchange(function(e) {
          var file, j, len, ref, results;
          ref = e.target.files;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            file = ref[j];
            results.push(onDrop(file));
          }
          return results;
        });
      });
    } else {
      div(function() {
        return height(250);
      });
      div(function() {
        var j, len, qItem, ref, results;
        left(0);
        right(0);
        color("black");
        box_shadow("0px 1px 3px rgba(0,0,0,.5)");
        background_color("#DADADA");
        border_radius(2);
        overflow("hidden");
        ref = portal.fileQ;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          qItem = ref[j];
          results.push(drawItem(qItem));
        }
        return results;
      });
      div(function() {
        position("relative");
        color("#A6A6A6");
        text_align("center");
        font_size(18);
        margin_top(55);
        text("Drop more files or ");
        span(function() {
          text_decoration("underline");
          return text("click here to upload");
        });
        return input({
          type: "file",
          multiple: true
        }, function() {
          cursor("pointer");
          position("absolute");
          top(-10);
          left(0);
          width("100%");
          bottom(-10);
          text_align("center");
          background_color("red");
          opacity(".0001");
          return onchange(function(e) {
            var file, j, len, ref, results;
            ref = e.target.files;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              file = ref[j];
              results.push(onDrop(file));
            }
            return results;
          });
        });
      });
      return div(function() {
        return height(100);
      });
    }
  };

  drawItem = function(qItem) {
    return div(function() {
      var image;
      position("relative");
      height(58);
      width("100%");
      if (qItem.error) {
        background_color("white");
        color("#e85845");
        if (qItem.errorMessage) {
          height(80);
          div(function() {
            position("absolute");
            top(48);
            left(15);
            return text(qItem.errorMessage);
          });
        }
      } else {
        div(function() {
          var percent;
          if (qItem.done) {
            percent = 100;
          } else {
            percent = 100 * qItem.loaded / qItem.total;
          }
          position("absolute");
          top(0);
          left(0);
          bottom(0);
          background_color("white");
          return width(Math.floor(percent) + "%");
        });
      }
      if (qItem.type.indexOf("image") !== -1) {
        image = "/img/icon_pic.png";
      } else if (qItem.type.indexOf("video") !== -1) {
        image = "/img/icon_movie.png";
      } else if (qItem.type.indexOf("audio") !== -1) {
        image = "/img/icon_music.png";
      } else if (qItem.type === "") {
        image = "/img/icon_folder.png";
      } else {
        image = "/img/icon_doc.png";
      }
      img({
        src: image,
        width: 24,
        height: 24
      }, function() {
        position("absolute");
        top(16);
        return left(16);
      });
      if (!qItem.done && !qItem.error) {
        img({
          src: "/img/x.png",
          width: 16,
          height: 16
        }, function() {
          position("absolute");
          top(21);
          right(18);
          cursor("pointer");
          return onclick(function() {
            qItem.error = true;
            qItem.start = null;
            return qItem.xhr.abort();
          });
        });
      }
      div(function() {
        var n, path;
        position("absolute");
        top(21);
        left(50);
        width(450);
        path = qItem.fullPath;
        n = 55;
        if (path.length > n) {
          path = "..." + path.slice(path.length - n, path.length);
        }
        return text(path);
      });
      return div(function() {
        var SIZES, j, len, ref, results, size, total, unit;
        position("absolute");
        top(21);
        right(50);
        total = qItem.total;
        SIZES = [[Math.pow(2, 30), "GB"], [Math.pow(2, 20), "MB"], [Math.pow(2, 10), "KB"], [Math.pow(2, 0), "B"]];
        results = [];
        for (j = 0, len = SIZES.length; j < len; j++) {
          ref = SIZES[j], size = ref[0], unit = ref[1];
          if (total > size) {
            text((total / size).toFixed(1) + unit);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
    });
  };

}).call(this);

//# sourceMappingURL=portal.js.map